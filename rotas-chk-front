# üìò Documenta√ß√£o Completa para Backend - Sistema de Checkout

## üéØ Vis√£o Geral

Este documento detalha todas as funcionalidades que o backend **cpro-back** deve implementar para suportar completamente o sistema de checkout frontend desenvolvido.

## üìã Requisitos T√©cnicos

### Tecnologias Sugeridas
- **Linguagem**: Node.js, Python, PHP, ou Java
- **Framework**: Express.js, FastAPI, Laravel, ou Spring Boot
- **Banco de Dados**: PostgreSQL ou MySQL
- **Autentica√ß√£o**: JWT
- **Cache**: Redis (opcional)
- **Upload**: AWS S3 ou equivalente

## üîê Sistema de Autentica√ß√£o

### JWT Implementation
```javascript
// Headers necess√°rios
{
  "Authorization": "Bearer <token>",
  "Content-Type": "application/json"
}
```

### Endpoints de Autentica√ß√£o
```
POST /api/auth/login
POST /api/auth/register
POST /api/auth/refresh
POST /api/auth/logout
GET  /api/auth/me
```

## üõí Endpoints Principais do Checkout

### 1. Gerenciamento de Produtos

#### Criar Produto
```
POST /api/products
Content-Type: application/json
Authorization: Bearer <token>

{
  "name": "Nome do Produto",
  "description": "Descri√ß√£o detalhada",
  "price": 99.90,
  "currency": "BRL",
  "slug": "meu-produto", // Gerado pelo frontend
  "images": ["url1", "url2"],
  "category": "digital",
  "status": "active",
  "checkout_settings": {
    "template": "modern",
    "primary_color": "#3B82F6",
    "pix_discount": 10,
    "split_payments": true,
    "max_installments": 12,
    "fields": ["name", "email", "phone", "cpf"],
    "required_fields": ["name", "email"],
    "analytics": {
      "google_analytics": "GA_TRACKING_ID",
      "facebook_pixel": "FB_PIXEL_ID"
    }
  }
}
```

#### Listar Produtos
```
GET /api/products?page=1&limit=10&status=active
Authorization: Bearer <token>
```

#### Obter Produto por Slug (P√öBLICO)
```
GET /api/products/slug/{slug}
// Sem autentica√ß√£o - para checkout p√∫blico
```

#### Atualizar Produto
```
PUT /api/products/{id}
Authorization: Bearer <token>
```

#### Deletar Produto
```
DELETE /api/products/{id}
Authorization: Bearer <token>
```

### 2. Sistema de Checkout P√∫blico

#### P√°gina de Checkout (HTML)
```
GET /checkout/{slug}
GET /checkout-pro/{slug}
// Retorna HTML renderizado com o checkout
// Deve aplicar template e configura√ß√µes do produto
```

#### API de Checkout
```
GET /api/checkout/{slug}
// Retorna dados JSON do produto para checkout
{
  "product": {
    "id": 1,
    "name": "Produto Teste",
    "price": 99.90,
    "currency": "BRL",
    "description": "Descri√ß√£o",
    "images": ["url1"],
    "checkout_settings": { /* configura√ß√µes */ }
  },
  "payment_methods": ["credit_card", "pix", "paypal"],
  "checkout_url": "https://checkout.seu-dominio.com/meu-produto"
}
```

#### Processar Pedido
```
POST /api/checkout/{slug}/order
Content-Type: application/json

{
  "customer": {
    "name": "Jo√£o Silva",
    "email": "joao@email.com",
    "phone": "+5511999999999",
    "cpf": "12345678901"
  },
  "payment": {
    "method": "credit_card",
    "installments": 3,
    "card_data": { /* dados criptografados */ }
  },
  "billing_address": { /* endere√ßo se necess√°rio */ }
}

Response:
{
  "order_id": "ORD-123456",
  "status": "pending",
  "payment_url": "https://payment.gateway.com/pay/123",
  "pix_code": "00020126...", // se PIX
  "total": 99.90
}
```

### 3. Gerenciamento de Pedidos

#### Listar Pedidos
```
GET /api/orders?page=1&limit=10&status=pending
Authorization: Bearer <token>
```

#### Obter Pedido
```
GET /api/orders/{order_id}
Authorization: Bearer <token>
```

#### Webhook de Pagamento
```
POST /api/webhooks/payment/{provider}
// Receber notifica√ß√µes de status de pagamento
// Providers: stripe, paypal, pagseguro, mercadopago
```

### 4. Analytics e Relat√≥rios

#### Estat√≠sticas do Produto
```
GET /api/products/{id}/analytics
Authorization: Bearer <token>

Response:
{
  "views": 1543,
  "conversions": 23,
  "conversion_rate": 1.49,
  "revenue": 2297.70,
  "top_traffic_sources": ["google", "facebook", "direct"],
  "abandoned_carts": 67
}
```

#### Dashboard Analytics
```
GET /api/dashboard/stats
Authorization: Bearer <token>

Response:
{
  "total_products": 15,
  "total_orders": 234,
  "total_revenue": 23456.78,
  "pending_orders": 12,
  "conversion_rate": 2.3,
  "monthly_growth": 15.5
}
```

### 5. Upload de Arquivos

#### Upload de Imagem
```
POST /api/upload/image
Content-Type: multipart/form-data
Authorization: Bearer <token>

Form Data:
- file: [arquivo de imagem]
- type: "product" | "logo" | "banner"

Response:
{
  "url": "https://cdn.seu-dominio.com/images/produto-123.jpg",
  "thumbnail": "https://cdn.seu-dominio.com/thumbs/produto-123.jpg"
}
```

### 6. Carrinho Abandonado

#### Tracking de Carrinho
```
POST /api/abandoned-cart/track
Content-Type: application/json

{
  "session_id": "sess_123456",
  "product_slug": "meu-produto",
  "customer_email": "joao@email.com",
  "customer_data": { /* dados parciais */ },
  "timestamp": "2024-01-15T10:30:00Z"
}
```

#### Recupera√ß√£o de Carrinho
```
GET /api/abandoned-cart/recovery/{token}
// Link enviado por email para recuperar carrinho
```

### 7. Sistema de Notifica√ß√µes

#### Configurar Webhooks
```
POST /api/webhooks/configure
Authorization: Bearer <token>

{
  "events": ["order.created", "payment.confirmed", "order.completed"],
  "url": "https://seu-sistema.com/webhook",
  "secret": "webhook_secret_key"
}
```

## üóÑÔ∏è Estrutura do Banco de Dados

### Tabela: users
```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  role VARCHAR(50) DEFAULT 'user', -- 'admin', 'user'
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Tabela: products
```sql
CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'BRL',
  slug VARCHAR(255) UNIQUE NOT NULL,
  images JSON, -- ["url1", "url2"]
  category VARCHAR(100),
  status VARCHAR(20) DEFAULT 'active', -- 'active', 'inactive', 'draft'
  checkout_settings JSON, -- Todas as configura√ß√µes do checkout
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Tabela: orders
```sql
CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  order_id VARCHAR(100) UNIQUE NOT NULL,
  product_id INTEGER REFERENCES products(id),
  customer_data JSON NOT NULL, -- Dados do cliente
  payment_data JSON NOT NULL, -- Dados do pagamento
  status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'paid', 'failed', 'cancelled'
  total DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'BRL',
  payment_method VARCHAR(50), -- 'credit_card', 'pix', 'paypal'
  payment_id VARCHAR(255), -- ID do gateway
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Tabela: analytics
```sql
CREATE TABLE analytics (
  id SERIAL PRIMARY KEY,
  product_id INTEGER REFERENCES products(id),
  event_type VARCHAR(50) NOT NULL, -- 'view', 'click', 'conversion'
  session_id VARCHAR(255),
  user_agent TEXT,
  ip_address INET,
  referrer TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Tabela: abandoned_carts
```sql
CREATE TABLE abandoned_carts (
  id SERIAL PRIMARY KEY,
  session_id VARCHAR(255) NOT NULL,
  product_id INTEGER REFERENCES products(id),
  customer_email VARCHAR(255),
  customer_data JSON,
  recovery_token VARCHAR(255) UNIQUE,
  recovered BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## üé® Templates de Email

### Email de Pedido Confirmado
```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Pedido Confirmado - {{product_name}}</title>
</head>
<body>
    <h1>Pedido Confirmado!</h1>
    <p>Ol√° {{customer_name}},</p>
    <p>Seu pedido #{{order_id}} foi confirmado com sucesso.</p>
    
    <h2>Detalhes do Pedido:</h2>
    <ul>
        <li>Produto: {{product_name}}</li>
        <li>Valor: {{currency}} {{total}}</li>
        <li>Forma de Pagamento: {{payment_method}}</li>
    </ul>
    
    <p>Obrigado pela sua compra!</p>
</body>
</html>
```

### Email de Carrinho Abandonado
```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Voc√™ esqueceu algo - {{product_name}}</title>
</head>
<body>
    <h1>N√£o perca essa oportunidade!</h1>
    <p>Ol√°,</p>
    <p>Voc√™ quase finalizou a compra de <strong>{{product_name}}</strong>.</p>
    
    <div style="text-align: center; margin: 30px 0;">
        <a href="{{recovery_url}}" style="background: #3B82F6; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px;">
            Finalizar Compra
        </a>
    </div>
    
    <p>Este link expira em 24 horas.</p>
</body>
</html>
```

## üîß Configura√ß√µes de Gateway

### Integra√ß√£o com Stripe
```javascript
// Configura√ß√£o do Stripe
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

// Criar pagamento
const paymentIntent = await stripe.paymentIntents.create({
  amount: Math.round(total * 100), // Centavos
  currency: 'brl',
  metadata: {
    order_id: orderId,
    product_slug: productSlug
  }
});
```

### Integra√ß√£o PIX (Brasil)
```javascript
// Gerar c√≥digo PIX
const pixCode = generatePixCode({
  merchantName: 'Sua Empresa',
  merchantCity: 'Cidade',
  txId: orderId,
  amount: total,
  pixKey: process.env.PIX_KEY
});
```



### Estrutura de Endpoints
```
/api/auth/*          - Autentica√ß√£o
/api/products/*      - Gerenciamento de produtos
/api/checkout/*      - API de checkout
/api/orders/*        - Gerenciamento de pedidos
/api/analytics/*     - Analytics e relat√≥rios
/api/upload/*        - Upload de arquivos
/api/webhooks/*      - Webhooks de pagamento
/checkout/{slug}     - P√°ginas p√∫blicas de checkout
/embed/{slug}        - Checkout embeddable
```

## ‚úÖ Checklist de Implementa√ß√£o

### Essencial (MVP)
- [ ] Sistema de autentica√ß√£o JWT
- [ ] CRUD de produtos
- [ ] API de checkout p√∫blico
- [ ] Processamento de pedidos
- [ ] Integra√ß√£o com gateway de pagamento
- [ ] Webhook de confirma√ß√£o de pagamento
- [ ] Banco de dados configurado

### Avan√ßado
- [ ] Analytics e tracking
- [ ] Recupera√ß√£o de carrinho abandonado
- [ ] Sistema de templates de email
- [ ] Upload de imagens
- [ ] Cache com Redis
- [ ] Rate limiting
- [ ] Logs estruturados

### Opcional
- [ ] Multi-tenancy
- [ ] Split payments
- [ ] Programa de afiliados
- [ ] API de relat√≥rios avan√ßados
- [ ] Integra√ß√£o com CRM
- [ ] Backup autom√°tico

## üìû Contato e Suporte

Para d√∫vidas sobre a implementa√ß√£o, consulte:
1. Esta documenta√ß√£o
2. C√≥digo fonte do frontend
3. Testes de integra√ß√£o inclusos

---

**Nota**: Esta documenta√ß√£o deve ser mantida atualizada conforme novas funcionalidades s√£o adicionadas ao frontend.
